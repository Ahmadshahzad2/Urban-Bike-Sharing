# Subset data for good weather (seasons 2 and 3)
good_weather <- subset(dataset, season %in% c(2, 3))$cnt
# Subset data for bad weather (season 1)
bad_weather <- subset(dataset, season == 1)$cnt
# Perform the t-test
t_test_result <- t.test(good_weather, bad_weather, var.equal = FALSE)
# Print the result
print(t_test_result)
library(dplyr)
# Dropping unnecessary columns and normalized columns
bike_data_for_regression <- dataset %>%
select(-c(registered, casual, instant, dteday, temp, atemp,yr,mnth, hum, windspeed,weathersit,weathersit_cat,season,season_cat,atemp_actual))
# Splitting the data into X (predictors) and y (response)
X <- bike_data_for_regression %>% select(-cnt)
y <- bike_data_for_regression$cnt
library(caret)
set.seed(42)  # For reproducibility
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
# Fitting the model
regression_model <- lm(y_train ~ ., data = X_train)
# Summary of the model
summary(regression_model)
# Getting coefficients
feature_weights <- coef(regression_model)
# Displaying the coefficients
feature_weights
library(ggplot2)
# Creating index vectors for train and test sets
index_train <- 1:length(y_train)
index_test <- (length(y_train) + 1):(length(y_train) + length(y_test))
y_pred_test <- predict(regression_model, newdata = X_test)
# Creating a data frame for the training set (actual values)
data_train <- data.frame(Index = index_train,Value = y_train,Type = "Training Actual"
)
# Creating a data frame for the test set (actual values)
data_test_actual <- data.frame(Index = index_test,Value = y_test,Type = "Test Actual"
)
# Creating a data frame for the test set (predicted values)
data_test_pred <- data.frame(Index = index_test,Value = y_pred_test,Type = "Test Predicted"
)
# Combining all data into one data frame
all_data <- rbind(data_train, data_test_actual, data_test_pred)
# Plotting
ggplot(all_data, aes(x = Index, y = Value, color = Type)) +
geom_line(size = 1) +
scale_color_manual(values = c("Training Actual" = "blue", "Test Actual" = "green", "Test Predicted" = "red")) +
ggtitle("Bike Rentals: Actual vs Predicted") +
ylab("Bike Rentals") +
theme_minimal() +
theme(legend.title = element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(readr)   # For reading the data
library(dplyr)   # For data manipulation
library(knitr)
library(ggplot2)
library(dplyr)
library(gridExtra) # For arranging multiple plots
library(car)
dataset <- read_csv("day.csv")
head(dataset)
str(dataset)
dim(dataset)
sum(is.na(dataset))
# Denormalize temperature (temp)
# temp_min = -8, temp_max = 39
dataset$temp_actual = (dataset$temp * (39 - (-8))) + (-8)
# Denormalize feeling temperature (atemp)
# atemp_min = -16, atemp_max = 50
dataset$atemp_actual = (dataset$atemp * (50 - (-16))) + (-16)
# Denormalize humidity (hum)
# Since it's divided by 100, we just multiply by 100
dataset$hum_actual = dataset$hum * 100
# Denormalize wind speed (windspeed)
# windspeed_max = 67
dataset$windspeed_actual = dataset$windspeed * 67
# View the first few rows of the dataset to confirm the changes
head(dataset)
key_variables <- c("temp_actual", "atemp_actual", "hum_actual",
"windspeed_actual", "cnt")
statistics <- dataset[, key_variables] %>% summary()
statistics
# For arranging plots
# Set a consistent theme
base_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
# Create individual plots with improved aesthetics
p1 <- ggplot(dataset, aes(x = temp_actual)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
ggtitle("Histogram of temp_actual") +
base_theme
p3 <- ggplot(dataset, aes(x = hum_actual)) +
geom_histogram(bins = 30, fill = "tomato", color = "black") +
ggtitle("Histogram of hum_actual") +
base_theme
p4 <- ggplot(dataset, aes(x = windspeed_actual)) +
geom_histogram(bins = 30, fill = "mediumpurple", color = "black") +
ggtitle("Histogram of windspeed_actual") +
base_theme
p5 <- ggplot(dataset, aes(x = cnt)) +
geom_histogram(bins = 30, fill = "sandybrown", color = "black") +
ggtitle("Histogram of cnt") +
xlab("Total Users/Day") +
base_theme
# Arrange the plots in a grid with 2 columns
grid.arrange(p1, p3, p4, p5, ncol = 2)
# Set a color palette
point_color <- "deepskyblue4"
line_color <- "darkorange"
# Create scatter plots with improved aesthetics
p1 <- ggplot(dataset, aes(x = temp_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Temperature vs Total Bike Rentals') +
base_theme
p2 <- ggplot(dataset, aes(x = atemp_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Feeling Temperature vs Total Bike Rentals') +
base_theme
p3 <- ggplot(dataset, aes(x = hum_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Humidity vs Total Bike Rentals') +
base_theme
p4 <- ggplot(dataset, aes(x = windspeed_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Wind Speed vs Total Bike Rentals') +
base_theme
# Arrange the plots in a grid with 2 rows
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(patchwork)
# Assuming you have a dataframe called 'data'
# Replace 'value_column', 'facet_column', and 'data' with your actual column names and dataframe
dataset <- dataset %>%
mutate(season_cat = case_when(
season == 1 ~ "Winter",
season == 2 ~ "Spring",
season == 3 ~ "Summer",
season == 4 ~ "Fall",
TRUE ~ "Unknown"  # Optional: for any value that is not 1, 2, 3, or 4
))
dataset <- dataset %>%
mutate(weathersit_cat = case_when(
weathersit == 1 ~ "Clear/Partly cloudy",
weathersit == 2 ~ "Mist/Few clouds",
weathersit == 3 ~ "Light Snow/Thunderstorm",
weathersit == 4 ~ "Heavy Rain/snow",
TRUE ~ "Unknown"  # Optional: for any value that is not 1, 2, 3, or 4
))
# Create the violin plot
p1=ggplot(dataset, aes(x=season_cat, y=cnt, fill=season_cat)) +
geom_violin(trim=FALSE) +
geom_jitter(width=0.2, alpha=0.5) +  # Add jittered data points
scale_fill_brewer(palette="Pastel1") +  # Color scheme
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate X-axis labels
labs(title="Total Users vs. Season",
x="Season", y="Total Users")
p2=ggplot(dataset, aes(x=weathersit_cat, y=cnt, fill=weathersit_cat)) +
geom_violin(trim=FALSE) +
geom_jitter(width=0.2, alpha=0.5) +  # Add jittered data points
scale_fill_brewer(palette="Set2") +  # Color scheme
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate X-axis labels
labs(title="Total Users vs. Weather Situation",
x="Weather Situation", y="Total Users")
p1|p2
library(reshape2)
library(ggplot2)
# Assuming your dataset is named 'dataset'
correlation_matrix <- cor(dataset[, c("temp_actual", "hum_actual", "windspeed_actual", "holiday", "weekday", "workingday", "cnt")])
# Melting the correlation matrix
melted_correlation_matrix <- melt(correlation_matrix)
# Plotting the heatmap with enhanced axis text
ggplot(data = melted_correlation_matrix, aes(Var1, Var2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = sprintf("%.2f", value)), size = 3, vjust = 1) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12, face = "bold"),  # Increased and bolded x-axis text
axis.text.y = element_text(size = 12, face = "bold"),  # Increased and bolded y-axis text
axis.title = element_text(size = 12),  # Adjusted axis title size
plot.title = element_text(size = 14)) +  # Adjusted plot title size
ggtitle('Correlation Matrix of All Variables')
# Enhanced histogram plot with faceting
ggplot(dataset, aes(x = cnt)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~workingday, labeller = labeller(workingday = c('0' = 'Holiday', '1' = 'Working Day'))) +  # Faceting with clear labels
ggtitle("Bike Rentals on Working Days vs. Holidays") +
xlab("Total Bike Rentals") +
ylab("Frequency") +
theme_minimal() +  # Applying a clean and modern theme
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"))  # Enhancing facet labels
qqPlot(anova_result, id=FALSE)
leveneTest(cnt ~ factor(weathersit), data=dataset)
# ANOVA test
anova_result <- aov(cnt ~ factor(weathersit), data=dataset)
summary(anova_result)
# Grouping weather situations
group_1_2 <- subset(dataset, weathersit %in% c(1, 2))$cnt
group_3 <- subset(dataset, weathersit == 3)$cnt
# Conducting the t-test
# Assuming unequal variances (Welch Two Sample t-test)
t_test_result <- t.test(group_1_2, group_3, var.equal = FALSE)
# Displaying the results
print(t_test_result)
# Subset data for good weather (seasons 2 and 3)
good_weather <- subset(dataset, season %in% c(2, 3))$cnt
# Subset data for bad weather (season 1)
bad_weather <- subset(dataset, season == 1)$cnt
# Perform the t-test
t_test_result <- t.test(good_weather, bad_weather, var.equal = FALSE)
# Print the result
print(t_test_result)
library(dplyr)
# Dropping unnecessary columns and normalized columns
bike_data_for_regression <- dataset %>%
select(-c(registered, casual, instant, dteday, temp, atemp,yr,mnth, hum, windspeed,weathersit,weathersit_cat,season,season_cat,atemp_actual))
# Splitting the data into X (predictors) and y (response)
X <- bike_data_for_regression %>% select(-cnt)
y <- bike_data_for_regression$cnt
library(caret)
set.seed(42)  # For reproducibility
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
# Fitting the model
regression_model <- lm(y_train ~ ., data = X_train)
# Summary of the model
summary(regression_model)
# Getting coefficients
feature_weights <- coef(regression_model)
# Displaying the coefficients
feature_weights
library(ggplot2)
# Creating index vectors for train and test sets
index_train <- 1:length(y_train)
index_test <- (length(y_train) + 1):(length(y_train) + length(y_test))
y_pred_test <- predict(regression_model, newdata = X_test)
# Creating a data frame for the training set (actual values)
data_train <- data.frame(Index = index_train,Value = y_train,Type = "Training Actual"
)
# Creating a data frame for the test set (actual values)
data_test_actual <- data.frame(Index = index_test,Value = y_test,Type = "Test Actual"
)
# Creating a data frame for the test set (predicted values)
data_test_pred <- data.frame(Index = index_test,Value = y_pred_test,Type = "Test Predicted"
)
# Combining all data into one data frame
all_data <- rbind(data_train, data_test_actual, data_test_pred)
# Plotting
ggplot(all_data, aes(x = Index, y = Value, color = Type)) +
geom_line(size = 1) +
scale_color_manual(values = c("Training Actual" = "blue", "Test Actual" = "green", "Test Predicted" = "red")) +
ggtitle("Bike Rentals: Actual vs Predicted") +
ylab("Bike Rentals") +
theme_minimal() +
theme(legend.title = element_blank())
anova_result <- aov(cnt ~ factor(weathersit), data=dataset)
qqPlot(anova_result, id=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)   # For reading the data
library(dplyr)   # For data manipulation
library(knitr)
library(ggplot2)
library(dplyr)
library(gridExtra) # For arranging multiple plots
library(car)
dataset <- read_csv("day.csv")
head(dataset)
str(dataset)
dim(dataset)
sum(is.na(dataset))
# Denormalize temperature (temp)
# temp_min = -8, temp_max = 39
dataset$temp_actual = (dataset$temp * (39 - (-8))) + (-8)
# Denormalize feeling temperature (atemp)
# atemp_min = -16, atemp_max = 50
dataset$atemp_actual = (dataset$atemp * (50 - (-16))) + (-16)
# Denormalize humidity (hum)
# Since it's divided by 100, we just multiply by 100
dataset$hum_actual = dataset$hum * 100
# Denormalize wind speed (windspeed)
# windspeed_max = 67
dataset$windspeed_actual = dataset$windspeed * 67
# View the first few rows of the dataset to confirm the changes
head(dataset)
key_variables <- c("temp_actual", "atemp_actual", "hum_actual",
"windspeed_actual", "cnt")
statistics <- dataset[, key_variables] %>% summary()
statistics
# For arranging plots
# Set a consistent theme
base_theme <- theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
# Create individual plots with improved aesthetics
p1 <- ggplot(dataset, aes(x = temp_actual)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
ggtitle("Histogram of temp_actual") +
base_theme
p3 <- ggplot(dataset, aes(x = hum_actual)) +
geom_histogram(bins = 30, fill = "tomato", color = "black") +
ggtitle("Histogram of hum_actual") +
base_theme
p4 <- ggplot(dataset, aes(x = windspeed_actual)) +
geom_histogram(bins = 30, fill = "mediumpurple", color = "black") +
ggtitle("Histogram of windspeed_actual") +
base_theme
p5 <- ggplot(dataset, aes(x = cnt)) +
geom_histogram(bins = 30, fill = "sandybrown", color = "black") +
ggtitle("Histogram of cnt") +
xlab("Total Users/Day") +
base_theme
# Arrange the plots in a grid with 2 columns
grid.arrange(p1, p3, p4, p5, ncol = 2)
# Set a color palette
point_color <- "deepskyblue4"
line_color <- "darkorange"
# Create scatter plots with improved aesthetics
p1 <- ggplot(dataset, aes(x = temp_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Temperature vs Total Bike Rentals') +
base_theme
p2 <- ggplot(dataset, aes(x = atemp_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Feeling Temperature vs Total Bike Rentals') +
base_theme
p3 <- ggplot(dataset, aes(x = hum_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Humidity vs Total Bike Rentals') +
base_theme
p4 <- ggplot(dataset, aes(x = windspeed_actual, y = cnt)) +
geom_point(color = point_color, alpha = 0.6) +
geom_smooth(method = "loess", se = FALSE, color = line_color) +
ggtitle('Wind Speed vs Total Bike Rentals') +
base_theme
# Arrange the plots in a grid with 2 rows
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(patchwork)
# Assuming you have a dataframe called 'data'
# Replace 'value_column', 'facet_column', and 'data' with your actual column names and dataframe
dataset <- dataset %>%
mutate(season_cat = case_when(
season == 1 ~ "Winter",
season == 2 ~ "Spring",
season == 3 ~ "Summer",
season == 4 ~ "Fall",
TRUE ~ "Unknown"  # Optional: for any value that is not 1, 2, 3, or 4
))
dataset <- dataset %>%
mutate(weathersit_cat = case_when(
weathersit == 1 ~ "Clear/Partly cloudy",
weathersit == 2 ~ "Mist/Few clouds",
weathersit == 3 ~ "Light Snow/Thunderstorm",
weathersit == 4 ~ "Heavy Rain/snow",
TRUE ~ "Unknown"  # Optional: for any value that is not 1, 2, 3, or 4
))
# Create the violin plot
p1=ggplot(dataset, aes(x=season_cat, y=cnt, fill=season_cat)) +
geom_violin(trim=FALSE) +
geom_jitter(width=0.2, alpha=0.5) +  # Add jittered data points
scale_fill_brewer(palette="Pastel1") +  # Color scheme
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate X-axis labels
labs(title="Total Users vs. Season",
x="Season", y="Total Users")
p2=ggplot(dataset, aes(x=weathersit_cat, y=cnt, fill=weathersit_cat)) +
geom_violin(trim=FALSE) +
geom_jitter(width=0.2, alpha=0.5) +  # Add jittered data points
scale_fill_brewer(palette="Set2") +  # Color scheme
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate X-axis labels
labs(title="Total Users vs. Weather Situation",
x="Weather Situation", y="Total Users")
p1|p2
library(reshape2)
library(ggplot2)
# Assuming your dataset is named 'dataset'
correlation_matrix <- cor(dataset[, c("temp_actual", "hum_actual", "windspeed_actual", "holiday", "weekday", "workingday", "cnt")])
# Melting the correlation matrix
melted_correlation_matrix <- melt(correlation_matrix)
# Plotting the heatmap with enhanced axis text
ggplot(data = melted_correlation_matrix, aes(Var1, Var2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = sprintf("%.2f", value)), size = 3, vjust = 1) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12, face = "bold"),  # Increased and bolded x-axis text
axis.text.y = element_text(size = 12, face = "bold"),  # Increased and bolded y-axis text
axis.title = element_text(size = 12),  # Adjusted axis title size
plot.title = element_text(size = 14)) +  # Adjusted plot title size
ggtitle('Correlation Matrix of All Variables')
# Enhanced histogram plot with faceting
ggplot(dataset, aes(x = cnt)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~workingday, labeller = labeller(workingday = c('0' = 'Holiday', '1' = 'Working Day'))) +  # Faceting with clear labels
ggtitle("Bike Rentals on Working Days vs. Holidays") +
xlab("Total Bike Rentals") +
ylab("Frequency") +
theme_minimal() +  # Applying a clean and modern theme
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"))  # Enhancing facet labels
anova_result <- aov(cnt ~ factor(weathersit), data=dataset)
qqPlot(anova_result, id=FALSE)
leveneTest(cnt ~ factor(weathersit), data=dataset)
# ANOVA test
anova_result <- aov(cnt ~ factor(weathersit), data=dataset)
summary(anova_result)
# Grouping weather situations
group_1_2 <- subset(dataset, weathersit %in% c(1, 2))$cnt
group_3 <- subset(dataset, weathersit == 3)$cnt
# Conducting the t-test
# Assuming unequal variances (Welch Two Sample t-test)
t_test_result <- t.test(group_1_2, group_3, var.equal = FALSE)
# Displaying the results
print(t_test_result)
# Subset data for good weather (seasons 2 and 3)
good_weather <- subset(dataset, season %in% c(2, 3))$cnt
# Subset data for bad weather (season 1)
bad_weather <- subset(dataset, season == 1)$cnt
# Perform the t-test
t_test_result <- t.test(good_weather, bad_weather, var.equal = FALSE)
# Print the result
print(t_test_result)
library(dplyr)
# Dropping unnecessary columns and normalized columns
bike_data_for_regression <- dataset %>%
select(-c(registered, casual, instant, dteday, temp, atemp,yr,mnth, hum, windspeed,weathersit,weathersit_cat,season,season_cat,atemp_actual))
# Splitting the data into X (predictors) and y (response)
X <- bike_data_for_regression %>% select(-cnt)
y <- bike_data_for_regression$cnt
library(caret)
set.seed(42)  # For reproducibility
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
# Fitting the model
regression_model <- lm(y_train ~ ., data = X_train)
# Summary of the model
summary(regression_model)
# Getting coefficients
feature_weights <- coef(regression_model)
# Displaying the coefficients
feature_weights
library(ggplot2)
# Creating index vectors for train and test sets
index_train <- 1:length(y_train)
index_test <- (length(y_train) + 1):(length(y_train) + length(y_test))
y_pred_test <- predict(regression_model, newdata = X_test)
# Creating a data frame for the training set (actual values)
data_train <- data.frame(Index = index_train,Value = y_train,Type = "Training Actual"
)
# Creating a data frame for the test set (actual values)
data_test_actual <- data.frame(Index = index_test,Value = y_test,Type = "Test Actual"
)
# Creating a data frame for the test set (predicted values)
data_test_pred <- data.frame(Index = index_test,Value = y_pred_test,Type = "Test Predicted"
)
# Combining all data into one data frame
all_data <- rbind(data_train, data_test_actual, data_test_pred)
# Plotting
ggplot(all_data, aes(x = Index, y = Value, color = Type)) +
geom_line(size = 1) +
scale_color_manual(values = c("Training Actual" = "blue", "Test Actual" = "green", "Test Predicted" = "red")) +
ggtitle("Bike Rentals: Actual vs Predicted") +
ylab("Bike Rentals") +
theme_minimal() +
theme(legend.title = element_blank())
colnames(dataset)
library(knitr)
library(kableExtra)
kable(dataset, "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "scale_down") %>%
column_spec(1:ncol(your_dataset), width = "2cm")  # Adjust the width as necessary
library(knitr)
library(kableExtra)
kable(dataset, "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "scale_down") %>%
column_spec(1:ncol(dataset), width = "2cm")  # Adjust the width as necessary
library(knitr)
library(kableExtra)
kable(dataset,  booktabs = TRUE) %>%
kable_styling(latex_options = "scale_down") %>%
column_spec(1:ncol(dataset), width = "2cm")  # Adjust the width as necessary
library(readr)   # For reading the data
library(dplyr)   # For data manipulation
library(knitr)
library(ggplot2)
library(dplyr)
library(gridExtra) # For arranging multiple plots
library(car)
